
rewrite all the code with errors and more.
services:  

import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();
// Ensure your Prisma client is imported

// : {
//   clerkUserId: string;
//   totalAmount: number;
//   items: { productId: number; quantity: number; price: number }[];
//   status: string; // "pending", "paid", etc.
// }

export const createOrder = async (orderData: any) => {
  const { clerkUserId, totalAmount, items, status } = orderData;

  console.log("Order data received:", orderData); // Log received data

  const user = await prisma.user.findUnique({
    where: { clerkUserId },
  });

  if (!user) {
    console.error("User not found for clerkUserId:", clerkUserId); // Log user not found case
    throw new Error("User Not Found!");
  }

  const createdOrder = await prisma.order.create({
    data: {
      userId: user.id,
      totalAmount,
      status,
      items: {
        create: items.map((item: any) => ({
          productId: item.productId,
          quantity: item.quantity,
          price: item.price,
        })),
      },
    },
    include: { items: true },
  });

  console.log("Order created:", createdOrder); // Log the created order

  return createdOrder;
};



export const getOrders = async (clerkUserId: string) => {
  const user = await prisma.user.findUnique({
    where: { clerkUserId },
  });

  if (!user) {
    return new Error("User Not Found!");
  }

  return await prisma.order.findMany({
    where: { userId: user.id },
    include: { items: { include: { product: true } } },
  });
};

controllers:

// order
import { getOrders } from "../services/order";
import { Request, Response } from "express";
import { createOrder } from "../services/order";

export const createOrderController = async (req: Request, res: Response) => {
  try {
    const { clerkUserId, totalAmount, items, status } = req.body;

    if (!clerkUserId || !totalAmount || !items || items.length === 0) {
      return res.status(400).json({ error: "Missing order data" });
    }

    const order = await createOrder({
      clerkUserId,
      totalAmount,
      items,
      status: status || "pending", // Default to pending
    });

    res.status(201).json(order);
  } catch (error) {
    console.error("Error creating order:", error);
    res.status(500).json({ error: "Failed to create order" });
  }
};

export const getOrdersByUserController = async (
  req: Request,
  res: Response
) => {
  try {
    const { clerkUserId } = req.params;

    if (!clerkUserId) {
      return res.status(400).json({ error: "Missing userId" });
    }

    const orders = await getOrders(clerkUserId);

    res.status(200).json(orders);
  } catch (error) {
    console.error("Error fetching orders:", error);
    res.status(500).json({ error: "Failed to fetch orders" });
  }
};

route:

router.post("/orders", createOrderController);
router.get("/orders/:clerkUserId", getOrdersByUserController);

zustand: 

  // Add an order to the backend and update the orders state
  addOrder: async (clerkUserId, status, totalAmount) => {
    set({ isLoading: true, error: null });
    try {
      const cartItems = get().cartItems.map((item) => ({
        productId: item.product.id,
        quantity: item.quantity,
        price: item.product.price,
      }));

      const response = await axios.post(`http://localhost:5000/orders`, {
        clerkUserId,
        status,
        totalAmount,
        items: cartItems,
      });

      set((state) => ({
        orders: [...state.orders, response.data],
        isLoading: false,
      }));

      // Reset the cart after the order is created
      await get().resetCart(clerkUserId);
    } catch (error) {
      set({ error: "Failed to create order", isLoading: false });
    }
  },

  fetchOrders: async (clerkUserId: string) => {
    set({ isLoading: true, error: null });
    try {
      const response = await axios.get(
        `http://localhost:5000/orders/${clerkUserId}`
      );
      set({ orders: response.data, isLoading: false });
    } catch (error) {
      set({ error: "Failed to fetch orders", isLoading: false });
    }
  },

  // reset the cart after successful payment
  resetCart: async (clerkUserId) => {
    set({ isLoading: true, error: null });

    try {
      // Make the API request to reset the cart in the database
      await axios.post(`http://localhost:5000/cart/reset`, { clerkUserId });

      // Clear cartItems in Zustand once the API request succeeds
      set({ cartItems: [], isLoading: false });
    } catch (error) {
      console.error("Error resetting cart!", error);
      set({ error: "Error resetting cart!", isLoading: false });
    }
  },

  success:

    useEffect(() => {
    if (isLoaded && user) {
      // Reset cart after payment
      resetCart(user.id);
    }
  }, [user, isLoaded, resetCart]);

const handleViewOrder = async () => {
  if (user && totalAmount > 0) {
    const status = "success";
    try {
      await addOrder(user.id, status, totalAmount);
      console.log("Order created successfully");
    } catch (error) {
      console.error("Error creating order:", error);
    }
  }
  router.push("/order");
};

order: 

useEffect(() => {
  if (isLoaded && user?.id) {
    fetchOrders(user.id); // Fetch orders for the logged-in user
  }
}, [isLoaded, user, fetchOrders]);
